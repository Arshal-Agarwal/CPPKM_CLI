#include <filesystem>  // Requires C++17
#define CLI11_HAS_FILESYSTEM 0

#include <fstream>
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <functional>
#include <algorithm>

namespace fs = std::filesystem;

namespace CLI {

    class App {
        std::string description;
        std::map<std::string, std::function<void()>> subcommands;
        std::string selected_command;
        std::vector<std::string> args;

    public:
        App(const std::string &desc = "") : description(desc) {}

        void add_subcommand(const std::string &name, const std::string &help, std::function<void()> func) {
            subcommands[name] = func;
        }

        void parse(int argc, char **argv) {
            for (int i = 1; i < argc; ++i) {
                args.emplace_back(argv[i]);
            }
            if (args.empty())
                return;

            std::string cmd = args[0];
            if (subcommands.find(cmd) != subcommands.end()) {
                selected_command = cmd;
            } else {
                std::cerr << "Unknown command: " << cmd << std::endl;
                std::exit(1);
            }
        }

        void run() {
            if (!selected_command.empty()) {
                subcommands[selected_command]();
            } else {
                std::cout << "Available commands:\n";
                for (const auto &pair : subcommands) {
                    std::cout << "  " << pair.first << std::endl;
                }
            }
        }
    };

} // namespace CLI

#define CLI11_PARSE(app, argc, argv) \
    do {                              \
        app.parse(argc, argv);        \
        app.run();                    \
    } while (0)

int main(int argc, char **argv) {
    CLI::App app("cppkm CLI");

    app.add_subcommand("init", "Initialize a cppkm project", [] {
        std::cout << "Initializing cppkm project...\n";

        // Create cppkm.toml
        std::ofstream toml("cppkm.toml");
        toml << "[project]\nname = \"my-project\"\nversion = \"0.1.0\"\n";
        toml.close();

        // Create requirements.txt
        std::ofstream reqs("requirements.txt");
        reqs << "# Add C++ libraries or git submodules here\n";
        reqs.close();

        // Create README.md
        std::ofstream readme("README.md");
        readme << "# My C++ Project\n\nGenerated by `cppkm init`.\n";
        readme.close();

        // Create .gitignore
        std::ofstream gitignore(".gitignore");
        gitignore << "build/\n*.exe\n*.out\n*.o\ncppkm.toml.lock\n";
        gitignore.close();

        // Create src/main.cpp
        fs::create_directories("src");
        std::ofstream main("src/main.cpp");
        main << "#include <iostream>\n\nint main() {\n    std::cout << \"Hello, C++!\" << std::endl;\n    return 0;\n}\n";
        main.close();

        // Create include/ directory
        fs::create_directories("include");

        // Optionally: initialize git repo
        if (std::system("git --version >nul 2>&1") == 0) {
            std::system("git init >nul");
        }

        std::cout << "Project initialized.\n";
    });

    CLI11_PARSE(app, argc, argv);
    return 0;
}
